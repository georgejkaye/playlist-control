networks:
  web:
    external: true
  internal:
    external: false

services:
  server:
    build:
      context: server
      dockerfile: Dockerfile.prod
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    environment:
      SERVER_PORT: ${SERVER_PORT}
      SPOTIFY_APP_ID: ${SPOTIFY_APP_ID}
      SPOTIFY_SECRET_FILE: /run/secrets/spotify_secret
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD_FILE: /run/secrets/db_password
      DB_NAME: ${DB_NAME}
      SECRET_KEY_FILE: /run/secrets/secret_key
      CLIENT_PROTOCOL: ${CLIENT_PROTOCOL}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.playlist_server.rule=Host(`${SERVER_HOST}`)"
      - "traefik.http.routers.playlist_server.tls=true"
      - "traefik.http.routers.playlist_server.tls.certresolver=lets-encrypt"
      - "traefik.http.services.playlist_server.loadbalancer.server.port=${SERVER_PORT}"
    secrets:
      - spotify_secret
      - secret_key
      - db_password
    networks:
      - internal
      - web
  client:
    build:
      context: client
      dockerfile: Dockerfile.prod
      args:
        CLIENT_PORT: ${CLIENT_PORT}
        SPOTIFY_APP_ID: ${SPOTIFY_APP_ID}
        SERVER_HOST: ${SERVER_HOST}
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"
    environment:
      CLIENT_PORT: ${CLIENT_PORT}
      SERVER_PORT: ${SERVER_PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.playlist_client.rule=Host(`${CLIENT_HOST}`)"
      - "traefik.http.routers.playlist_client.tls=true"
      - "traefik.http.routers.playlist_client.tls.certresolver=lets-encrypt"
      - "traefik.http.services.playlist_client.loadbalancer.server.port=${CLIENT_PORT}"
    networks:
      - internal
      - web
    depends_on:
      - server

secrets:
  spotify_secret:
    file: spotify.secret
  db_password:
    file: db.secret
  secret_key:
    file: key.secret